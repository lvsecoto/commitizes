#!/bin/bash
LIST_DISPLAY_LINE_NUM=6
LIST_DISPLAY_MARKER='\033[;32m*\033[0m'

commit_type_list=\
"feat:A new feature
fix:A bug fix
docs:Documentation only changes
style:Changes that do not affect the meaning of the code 
refactor:A code change that neither fixes a bug nor adds a feature
perf:A code change that improves performance
test:Adding missing or correcting existing tests
chore:Changes to the build process or auxiliary tools and libraries such as documentation generation"

commit_scope_desc="\
The scope could be anything specifying place of the commit change.
You can use * when the change affects more than a single scope."

commit_subject_desc="\
The subject contains succinct description of the change:
 
  * use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"
  \033[;31m* don't capitalize first letter\033[0m
  * no dot (.) at the end"

commit_body_desc="\
Just as in the subject, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". 
The body should include the motivation for the change and contrast this with previous behavior.
"
commit_breaking_changes_desc="\
"

# Display 4 line type description, start by specified $1, and put a marker at 
# $2
# 
# LIST_TITLE:
#	Hint show at the top of list
#	If it is null, title line will not show
# LIST_ADAPTER: 
#	Which list(array) you want to display. With two clonm, one is
# 	item name, and two is description(or null), seperating by ':"
#	Each item is seperated by '\n'
# LIST_LIST:
#	Use list_adapter_to_list() to convert LIST_ADAPTER to LIST_LIST
# LIST_COUNT
#	Count of list item
# LIST_INDEX_START:
#	Start item
# LIST_INDEX_SELECTED:
#	Selected item
# LIST_DISPLAY_DIR
#	If defined as "back", go back to the line where list display
# LIST_DISPLAY_LINE_NUM:
#	Number of list to display
# LIST_DISPLAY_MARKER:
#	A charater, mark at the beginning of selected line

display_cusor_to_start()
{
	echo -ne "\r"
}

display_show_cusor()
{
	echo -ne "\033[?25h"
}

display_hide_cusor()
{
	echo -ne "\033[?25l"
}

display_line()
{
	DISPLAY_LINE=$[$DISPLAY_LINE + 1];
	echo -e $1
}

display_delete_line()
{
	echo -ne "\E[A\E[K"
}

display_clear_line()
{
	while [ $DISPLAY_LINE -gt 0 ]
	do
		display_delete_line
		DISPLAY_LINE=$[ $DISPLAY_LINE - 1]
	done	
	unset DISPLAY_LINE
}

display_read()
{
	read DISPLAY_READ_RESAULT
	display_delete_line
}

list_adapter_to_list()
{
	local IFS_bk=$IFS
	IFS=$'\n'
	LIST_LIST=($LIST_ADAPTER)
	IFS=$IFS_bk
}

list_display()
{
	# move cusor to start
	display_cusor_to_start

	local line=$LIST_INDEX_START
	local line_max=$[$LIST_INDEX_START + $LIST_DISPLAY_LINE_NUM]
	local blank_line_max=$line_max


	if [ $line_max -gt ${#LIST_LIST[@]} ]; then
		line_max=${#LIST_LIST[@]}
	fi

	local IFS_bk=$IFS
	IFS=':'
	# put item to console
	while [ $line -lt $line_max ]
	do
		item=(${LIST_LIST[$line]})

		if [ $LIST_INDEX_SELECTED -eq $line ]; then
			marker=$LIST_DISPLAY_MARKER
		else
			marker=" "
		fi

		echo  -e "$marker [${item[0]}] ${item[1]} \E[K"
		line=$[ $line + 1 ]
	done

	IFS=$IFS_bk

	# put blank line
	while [ $line -lt $blank_line_max ]
	do
		echo
		line=$[ $line + 1 ]
	done

	# Go back to fist line
	if [ "$LIST_DISPLAY_DIR" = "back" ]; then
		echo -ne "\E[$[${LIST_DISPLAY_LINE_NUM}]A"
	fi

}

list_display_clear()
{
	local line=0
	echo -ne "\r"
	while [ $line -lt $LIST_DISPLAY_LINE_NUM ]
	do
		echo -e "\E[K"
		line=$[ $line + 1 ]
	done

	# Go back to fist line
	if [ "$LIST_DISPLAY_DIR" = "back" ]; then
		echo -ne "\E[$[${LIST_DISPLAY_LINE_NUM}]A"
	fi
}

list_select_up()
{
	if [ $LIST_INDEX_SELECTED -gt 0 ]; then
		LIST_INDEX_SELECTED=$[ $LIST_INDEX_SELECTED - 1 ]
	fi

	if [ $LIST_INDEX_SELECTED -lt $LIST_INDEX_START ];then
		LIST_INDEX_START=$[ $LIST_INDEX_START - 1]
	fi

}

list_select_down()
{
	index_max=$[ $LIST_COUNTS - 1 ]
	if [ $LIST_INDEX_SELECTED -lt  $index_max ]; then
		LIST_INDEX_SELECTED=$[ $LIST_INDEX_SELECTED + 1 ]
	fi
	
	if [ $[ $LIST_INDEX_SELECTED - $LIST_INDEX_START ] \
		-ge $LIST_DISPLAY_LINE_NUM ]; then
		LIST_INDEX_START=$[ $LIST_INDEX_START + 1 ]
	fi
}

list_open()
{
	display_hide_cusor
	display_cusor_to_start
	
	# init
	list_adapter_to_list
	LIST_COUNTS=${#LIST_LIST[@]}
	LIST_INDEX_START=0
	LIST_INDEX_SELECTED=0
	LIST_DISPLAY_DIR="back"

	# title
	if [ -n "$LIST_TITLE" ];then
		display_line "$LIST_TITLE"
	fi

	list_display
	while [ : ]
	do
		read -s -N1
		case $REPLY in
			j | B)
				list_select_down
				;;
			k | A)
				list_select_up
				;;
			$'\n')	
				local IFS_bk=$IFS
				IFS=':'
				LIST_SELECT_ITEM=(${LIST_LIST[$LIST_INDEX_SELECTED]})
				IFS=$IFS_bk
				LIST_SELECT_ITEM_NAME=${LIST_SELECT_ITEM[0]}
				LIST_SELECT_ITEM_DESC=${LIST_SELECT_ITEM[1]}
				break
				;;
		esac
		list_display
	done

	# clear screen
	list_display_clear

	display_clear_line

}

editor_open()
{
	local IFS_BK=$IFS
	local title=$EDITOR_TITLE
	local descs=""
	local -i desc_line=0
	local read_cusor_pos=$[${#EDITOR_TITLE}]

	IFS=$'\n'
	descs=($EDITOR_DESC)
	IFS=$IFS_bk

	display_hide_cusor
	display_cusor_to_start

	display_line $title
	
	while [ $desc_line -lt ${#descs[@]} ]
	do
		display_line ${descs[$desc_line]}
		desc_line=$[ $desc_line + 1]
	done

	# back to end of title line then read
	echo -ne "\E[${DISPLAY_LINE}A\E[${read_cusor_pos}C"

	display_show_cusor
	display_read
	display_hide_cusor

	# get read resault
	EDITOR_RESAULT=$DISPLAY_READ_RESAULT

	# back to the last line then clear line
	echo -ne "\E[${DISPLAY_LINE}B\E[${read_cusor_pos}D"

	display_clear_line

}

ex_editor_open()
{
	local title=$EX_EDITOR_TITLE
	local template=$EX_EDITOR_TEMPLATE
	local -i template_start_line=0
	local IFS_bk=$IFS
	IFS=$'\n'
	local descs=($EX_EDITOR_DESC)
	IFS=$IFS_bk
	local -i desc_line=0
	
	echo -en "" > tmp

	# title
	if [ "$title" != "" ];then
		echo "# $title" >> tmp
	fi

	# blank line for edit
	if [ "$template" != "" ]; then
		echo -ne "$template\n" >> tmp
		template_start_line=$EX_EDITOR_TEMPLATE_START_LINE
	else
		echo -en "\n\n\n" >> tmp
		template_start_line=0
	fi

	echo "####################################" >> tmp
	echo "# LINE START WITH # WILL BE IGNORE #" >> tmp
	echo "####################################" >> tmp
	echo "" >> tmp

	# description
	while [ $desc_line -lt ${#descs[@]} ]
	do
		echo "# ${descs[$desc_line]}" >> tmp
		desc_line=$[ $desc_line + 1 ]
	done
		
	# open vim editor
	if [ "$title" != "" ];then
		vim tmp +$[ 2 + $template_start_line] -c "set cc=100"
	else
		vim tmp +$[ 1 + $template_start_line] -c "set cc=100"
	fi

	# delete line start with '#'
	EX_EDITOR_RESAULT=`grep tmp -v -e "^#"`

	rm tmp
}

commit_get_header()
{
	local _type="unknow"
	local scope=""
	local subject=""

	if [ "$COMMIT_SCOPE" != ""  ];then
		scope="($COMMIT_SCOPE)"
	fi

	subject=$COMMIT_SUBJECT

	if [ "$COMMIT_TYPE" != "" ];then
		_type=$COMMIT_TYPE
		COMMIT_HEADER="${_type}${scope}: ${subject}"
	else
		COMMIT_HEADER=""
	fi


}

commit_get_footer()
{
	COMMIT_FOOTER=""

	if [ "$COMMIT_BREAKING_CHANGE" != "" ];then
		COMMIT_FOOTER="$COMMIT_FOOTER"$'\n \n'"BREAKING CHANGE:"$'\n \n \n'"$COMMIT_BREAKING_CHANGE"
	fi
	
	if [ "$COMMIT_CLOSED_ISSUES" != "" ];then
		COMMIT_FOOTER="$COMMIT_FOOTER"$'\n \n'"$COMMIT_CLOSED_ISSUES"
	fi

	if [ "$COMMIT_EXTRA" != "" ];then
		COMMIT_FOOTER="$COMMIT_FOOTER"$'\n \n'"$COMMIT_EXTRA"
	fi

}

commit_get_all()
{
	commit_get_header
	commit_get_footer

	COMMIT_ALL="$COMMIT_HEADER"$'\n'

	if [ "$COMMIT_BODY" != "" ];then
		COMMIT_ALL="$COMMIT_ALL"$'\n \n'"$COMMIT_BODY"$'\n'
	fi
	
	if [ "$COMMIT_FOOTER" != "" ];then
		COMMIT_ALL="$COMMIT_ALL$COMMIT_FOOTER"
	fi
}

commit_type()
{
	LIST_ADAPTER=$commit_type_list
	LIST_TITLE="Chose a type:"
	list_open
	COMMIT_TYPE=$LIST_SELECT_ITEM_NAME
}

commit_scope()
{
	COMMIT_SCOPE=""
	EDITOR_TITLE="Scope:"
	EDITOR_DESC=$commit_scope_desc
	editor_open
	COMMIT_SCOPE=$EDITOR_RESAULT
}

commit_subject()
{
	COMMIT_SUBJECT=""
	commit_get_header
	EDITOR_TITLE=$COMMIT_HEADER
	EDITOR_DESC=$commit_subject_desc
	editor_open
	COMMIT_SUBJECT=$EDITOR_RESAULT
}

commit_body()
{
	COMMIT_BODY=""
	EX_EDITOR_TITLE="Body:"
	EX_EDITOR_DESC="\
$commit_body_desc
 
Git Status: 
`git status -s -b`"
	EX_EDITOR_TEMPLATE=""
	
	ex_editor_open
	COMMIT_BODY="$EX_EDITOR_RESAULT"
}

commit_breaking_change()
{
	COMMIT_BREAKING_CHANGE=""
	EX_EDITOR_TITLE="\"BREAKING CHANGE:\" will automatically add to commit message"
	EX_EDITOR_TEMPLATE=""
	EX_EDITOR_DESC=""

	ex_editor_open

	COMMIT_BREAKING_CHANGE="$EX_EDITOR_RESAULT"

}

commit_closed_issues()
{
	COMMIT_CLOSED_ISSUES=""
	EDITOR_TITLE="Enter the issues number, separatting by ' ': "
	EDITOR_DESC=""
	editor_open

	local IFS_bk=$IFS
	IFS=$' '
	local issues=(`echo $EDITOR_RESAULT | sed -e "s/[^0-9 ]//g"`)
	IFS=$IFS_bk
	local issue=""

	COMMIT_CLOSED_ISSUES=""
	for issue in ${issues[*]}
	do
		COMMIT_CLOSED_ISSUES="${COMMIT_CLOSED_ISSUES}Closes #$issue"$'\n'
	done

}

commit_extra()
{
	COMMIT_EXTRA=""
	EX_EDITOR_TITLE="Extra messages:"
	EX_EDITOR_TEMPLATE=""
	EX_EDITOR_DESC=""

	ex_editor_open

	COMMIT_EXTRA="$EX_EDITOR_RESAULT"
}

commit_footer()
{
	LIST_ADAPTER="\
Breaking Change
Close issues
Extra
Finish
"
	LIST_TITLE="Chose a footer operation:"

	while [ 1 -eq 1 ]
	do
		list_open
		case "$LIST_SELECT_ITEM_NAME" in
			"Breaking Change" )
				commit_breaking_change
				;;
			"Close issues" )
				commit_closed_issues
				;;
			"Extra" )
				commit_extra
				;;
			"Finish" | * )
				break
				;;
		esac
	done
}

commit_confirm()
{
	commit_get_all

	local IFS_bk=$IFS
	IFS=$'\n'
	local commit=($COMMIT_ALL)
	IFS=$IFS_bk
	
	local -i commit_line=0

	while [ $commit_line -lt ${#commit[@]} ]
	do
		local line="${commit[$commit_line]}"

		if [ "$line" == " " ];then
			display_line " "
		else
			display_line "${commit[$commit_line]}"
		fi
		commit_line=$[ $commit_line + 1 ]
	done

	display_line "======================================================"
	
	LIST_TITLE="Commit?"
	LIST_ADAPTER="yes:
no:"
	list_open
	
	if [ $LIST_SELECT_ITEM_NAME == "yes" ];then
		echo -ne "$COMMIT_ALL" | git commit -F - 
	fi
}

# return to home position
home()
{
	echo -ne "\E8"

}

begin()
{
	# clear screan, got to console home position, and save this position.
	echo -ne "\E[H\E[2J\E7"

	# no wrap
	echo -ne "\033[?7l"

	# ^C to clear screen and quit
	trap "home;echo -ne \"\E[H\E[2J\";display_show_cusor;exit" 2
}

end()
{
	echo [finish...]
}

main()
{
	begin

	commit_type
	commit_scope
	commit_subject
	commit_body
	commit_footer
	commit_confirm


}

main
